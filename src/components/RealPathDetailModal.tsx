import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { MapPin, Clock, Info, Toilet, Car, Building, Coffee, ShoppingCart, Lightbulb } from 'lucide-react';
import SmallMap from './SmallMap';
import NearbyRestaurants from './NearbyRestaurants';

interface RealWalkingPath {
  CoursCode: string;
  CoursName: string | null;
  CorusDetailName: string | null;
  Address: string | null;
  CoursLength: string | null;
  CoursDetailLength: number | null;
  CoursTime: string | null;
  CoursLv: string | null;
  CoursRoute: string | null;
  Latitude: number | null;
  Longitude: number | null;
  ADIT_DC: string | null;
  Option: string | null;
  Toilet: string | null;
  SIGNGU_NM: string | null;
  CVNTL_NM: string | null;
}

interface RealPathDetailModalProps {
  path: RealWalkingPath | null;
  isOpen: boolean;
  onClose: () => void;
  onSelect: () => void;
}

const RealPathDetailModal = ({ path, isOpen, onClose, onSelect }: RealPathDetailModalProps) => {
  if (!path) return null;

  const getDifficultyColor = (level: string | null) => {
    if (!level) return 'bg-gray-100 text-gray-800';
    const levelLower = level.toLowerCase();
    if (levelLower.includes('Ïâ¨ÏõÄ') || levelLower.includes('Ï¥àÍ∏â')) return 'bg-green-100 text-green-800';
    if (levelLower.includes('Î≥¥ÌÜµ') || levelLower.includes('Ï§ëÍ∏â')) return 'bg-yellow-100 text-yellow-800';
    if (levelLower.includes('Ïñ¥Î†§ÏõÄ') || levelLower.includes('Í≥†Í∏â')) return 'bg-red-100 text-red-800';
    return 'bg-gray-100 text-gray-800';
  };

  const getDistance = () => {
    if (path.CoursDetailLength) return `${path.CoursDetailLength.toFixed(1)}km`;
    if (path.CoursLength) return path.CoursLength;
    return 'Ï†ïÎ≥¥ ÏóÜÏùå';
  };

  const getTime = () => {
    if (path.CoursTime) return path.CoursTime;
    const distance = path.CoursDetailLength || parseFloat(path.CoursLength || '0') || 0;
    return distance > 0 ? `ÏïΩ ${Math.round(distance * 15)}Î∂Ñ` : 'Ï†ïÎ≥¥ ÏóÜÏùå';
  };

  // Ìé∏ÏùòÏãúÏÑ§ ÌååÏã± Ìï®Ïàò
  const getAmenities = () => {
    const amenities = [];
    
    // ÌôîÏû•Ïã§ Ï†ïÎ≥¥
    if (path.Toilet === 'Y' || path.Toilet === 'ÏûàÏùå' || 
        (path.Option && (path.Option.includes('ÌôîÏû•Ïã§') || path.Option.includes('Í≥µÏ§ëÌôîÏû•Ïã§')))) {
      amenities.push({ icon: Toilet, label: 'ÌôîÏû•Ïã§ Ïù¥Ïö© Í∞ÄÎä•', color: 'text-blue-600' });
    }
    
    // Ï£ºÏ∞®Ïû• Ï†ïÎ≥¥
    if (path.Option && (path.Option.includes('Ï£ºÏ∞®') || path.Option.includes('Ï£ºÏ∞®Ïû•') ||
        path.Option.includes('Ï£ºÏ∞®ÏãúÏÑ§'))) {
      amenities.push({ icon: Car, label: 'Ï£ºÏ∞®Ïû• ÏûàÏùå', color: 'text-green-600' });
    }
    
    // Ìé∏ÏùòÏ†ê Ï†ïÎ≥¥
    if (path.Option && (path.Option.includes('Ìé∏ÏùòÏ†ê') || path.Option.includes('Îß§Ï†ê') ||
        path.Option.includes('ÏÉÅÏ†ê'))) {
      amenities.push({ icon: ShoppingCart, label: 'Ìé∏ÏùòÏ†ê', color: 'text-purple-600' });
    }
    
    // Ïπ¥Ìéò/ÏùåÏãùÏ†ê Ï†ïÎ≥¥
    if (path.Option && (path.Option.includes('Ïπ¥Ìéò') || path.Option.includes('Ïª§Ìîº') ||
        path.Option.includes('ÏùåÏãùÏ†ê') || path.Option.includes('ÏãùÎãπ') || 
        path.Option.includes('Ìú¥Í≤åÏÜå'))) {
      amenities.push({ icon: Coffee, label: 'Ïπ¥Ìéò/ÏùåÏãùÏ†ê', color: 'text-orange-600' });
    }
    
    // ADIT_DCÏóêÏÑúÎèÑ Ìé∏ÏùòÏãúÏÑ§ Ï†ïÎ≥¥ Ï∂îÏ∂ú
    if (path.ADIT_DC) {
      const description = path.ADIT_DC.toLowerCase();
      
      if (description.includes('ÌôîÏû•Ïã§') && !amenities.some(a => a.label.includes('ÌôîÏû•Ïã§'))) {
        amenities.push({ icon: Toilet, label: 'ÌôîÏû•Ïã§ Ïù¥Ïö© Í∞ÄÎä•', color: 'text-blue-600' });
      }
      
      if ((description.includes('Ï£ºÏ∞®') || description.includes('Ï£ºÏ∞®Ïû•')) && 
          !amenities.some(a => a.label.includes('Ï£ºÏ∞®Ïû•'))) {
        amenities.push({ icon: Car, label: 'Ï£ºÏ∞®Ïû• ÏûàÏùå', color: 'text-green-600' });
      }
      
      if ((description.includes('Ìé∏ÏùòÏ†ê') || description.includes('Îß§Ï†ê')) && 
          !amenities.some(a => a.label.includes('Ìé∏ÏùòÏ†ê'))) {
        amenities.push({ icon: ShoppingCart, label: 'Ìé∏ÏùòÏ†ê', color: 'text-purple-600' });
      }
      
      if ((description.includes('Ïπ¥Ìéò') || description.includes('Ïª§Ìîº') || 
           description.includes('ÏùåÏãùÏ†ê') || description.includes('ÏãùÎãπ')) && 
          !amenities.some(a => a.label.includes('Ïπ¥Ìéò'))) {
        amenities.push({ icon: Coffee, label: 'Ïπ¥Ìéò/ÏùåÏãùÏ†ê', color: 'text-orange-600' });
      }
    }
    
    return amenities;
  };

  // Ï∂îÏ≤ú Ïù¥Ïú† ÏÉùÏÑ± Ìï®Ïàò
  const getRecommendationReason = () => {
    const reasons = [];
    
    // Í±∞Î¶¨ Í∏∞Î∞ò Ï∂îÏ≤ú
    const distance = path.CoursDetailLength || parseFloat(path.CoursLength || '0') || 0;
    if (distance <= 2) {
      reasons.push('Í∞ÄÎ≤ºÏö¥ ÏÇ∞Ï±ÖÏóê Ï†ÅÌï©Ìïú ÏßßÏùÄ Í±∞Î¶¨Î°ú ÏùºÏÉÅÏ†ÅÏù∏ Ïö¥ÎèôÏóê Ï¢ãÏäµÎãàÎã§');
    } else if (distance <= 4) {
      reasons.push('Ï†ÅÎãπÌïú Ïö¥ÎèôÎüâÏùò Ï§ëÍ±∞Î¶¨ ÏΩîÏä§Î°ú Í±¥Í∞ï Í¥ÄÎ¶¨Ïóê Ìö®Í≥ºÏ†ÅÏûÖÎãàÎã§');
    } else {
      reasons.push('Ï∂©Î∂ÑÌïú Ïö¥Îèô Ìö®Í≥ºÎ•º Í∏∞ÎåÄÌï† Ïàò ÏûàÎäî Ïû•Í±∞Î¶¨ ÏΩîÏä§Î°ú Ï≤¥Î†• Ìñ•ÏÉÅÏóê ÎèÑÏõÄÎê©ÎãàÎã§');
    }
    
    // ÎÇúÏù¥ÎèÑ Í∏∞Î∞ò Ï∂îÏ≤ú
    if (path.CoursLv) {
      const level = path.CoursLv.toLowerCase();
      if (level.includes('Ïâ¨ÏõÄ') || level.includes('Ï¥àÍ∏â')) {
        reasons.push('Ï¥àÎ≥¥ÏûêÎèÑ Î∂ÄÎã¥ ÏóÜÏù¥ Ï¶êÍ∏∏ Ïàò ÏûàÎäî ÌèâÌÉÑÌïú ÏΩîÏä§ÏûÖÎãàÎã§');
      } else if (level.includes('Î≥¥ÌÜµ') || level.includes('Ï§ëÍ∏â')) {
        reasons.push('Ï†ÅÎãπÌïú ÎèÑÏ†ÑÍ≥º Ïö¥Îèô Ìö®Í≥ºÎ•º Ï†úÍ≥µÌïòÎäî Í∑†Ìòï Ïû°Ìûå ÏΩîÏä§ÏûÖÎãàÎã§');
      } else if (level.includes('Ïñ¥Î†§ÏõÄ') || level.includes('Í≥†Í∏â')) {
        reasons.push('ÎèÑÏ†ÑÏ†ÅÏù∏ ÏΩîÏä§Î°ú ÎÜíÏùÄ Ïö¥Îèô Ìö®Í≥ºÏôÄ ÏÑ±Ï∑®Í∞êÏùÑ ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§');
      }
    }
    
    // Ìé∏ÏùòÏãúÏÑ§ Í∏∞Î∞ò Ï∂îÏ≤ú
    if (path.Toilet === 'Y' || path.Toilet === 'ÏûàÏùå') {
      reasons.push('ÌôîÏû•Ïã§ Îì± Ìé∏ÏùòÏãúÏÑ§Ïù¥ Ïûò Í∞ñÏ∂∞Ï†∏ ÏûàÏñ¥ ÏïàÏã¨ÌïòÍ≥† Ïù¥Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§');
    }
    
    // ÏßÄÏó≠ ÌäπÏÑ± Í∏∞Î∞ò Ï∂îÏ≤ú
    if (path.SIGNGU_NM) {
      reasons.push(`${path.SIGNGU_NM} ÏßÄÏó≠Ïùò ÎåÄÌëúÏ†ÅÏù∏ ÏÇ∞Ï±ÖÎ°úÎ°ú Ï†ëÍ∑ºÏÑ±Ïù¥ Ï¢ãÏäµÎãàÎã§`);
    }
    
    // ÌäπÎ≥ÑÌïú ÌäπÏßï Í∏∞Î∞ò Ï∂îÏ≤ú
    if (path.ADIT_DC) {
      const description = path.ADIT_DC.toLowerCase();
      if (description.includes('Í∞ï') || description.includes('Ìò∏Ïàò')) {
        reasons.push('ÏïÑÎ¶ÑÎã§Ïö¥ ÏàòÎ≥Ä ÌíçÍ≤ΩÏùÑ Í∞êÏÉÅÌïòÎ©∞ ÌûêÎßÅÌï† Ïàò ÏûàÎäî ÌäπÎ≥ÑÌïú ÏΩîÏä§ÏûÖÎãàÎã§');
      }
      if (description.includes('Ïà≤') || description.includes('ÎÇòÎ¨¥')) {
        reasons.push('ÏûêÏó∞ ÏÜçÏóêÏÑú ÏÇºÎ¶ºÏöïÍ≥º Ìï®Íªò ÌûêÎßÅÌï† Ïàò ÏûàÎäî Ïà≤Í∏∏ ÏΩîÏä§ÏûÖÎãàÎã§');
      }
      if (description.includes('Ïó≠ÏÇ¨') || description.includes('Î¨∏Ìôî')) {
        reasons.push('Ïó≠ÏÇ¨ÏôÄ Î¨∏ÌôîÎ•º Ìï®Íªò Ï≤¥ÌóòÌï† Ïàò ÏûàÎäî ÍµêÏú°Ï†Å Í∞ÄÏπòÍ∞Ä ÎÜíÏùÄ ÏΩîÏä§ÏûÖÎãàÎã§');
      }
    }
    
    return reasons.slice(0, 3).join('. ') + '.';
  };

  const handleSelect = () => {
    onSelect();
    onClose();
  };

  const amenities = getAmenities();
  const recommendationReason = getRecommendationReason();

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex justify-between items-start">
            <DialogTitle className="text-xl">
              {path.CoursName || path.CorusDetailName || 'ÏÇ∞Ï±ÖÎ°ú'}
            </DialogTitle>
            <Badge variant="outline" className="ml-2">
              Ïã§Ï†ú Îì±Î°ù Í≤ΩÎ°ú
            </Badge>
          </div>
          <div className="flex gap-2 flex-wrap mt-2">
            {path.CoursLv && (
              <Badge className={getDifficultyColor(path.CoursLv)}>
                {path.CoursLv}
              </Badge>
            )}
            {path.SIGNGU_NM && (
              <Badge variant="outline" className="text-xs">
                {path.SIGNGU_NM}
              </Badge>
            )}
            {path.CVNTL_NM && (
              <Badge variant="outline" className="text-xs">
                {path.CVNTL_NM}
              </Badge>
            )}
          </div>
        </DialogHeader>

        <div className="space-y-6">
          {/* Ï∂îÏ≤ú Ïù¥Ïú† ÏÑπÏÖò */}
          <div className="p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400">
            <div className="flex items-start gap-3">
              <Lightbulb className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
              <div>
                <div className="text-sm font-medium text-blue-800 mb-2">üí° Ï∂îÏ≤ú Ïù¥Ïú†</div>
                <p className="text-sm text-blue-700 leading-relaxed">{recommendationReason}</p>
              </div>
            </div>
          </div>

          {/* ÏßÄÎèÑ ÏÑπÏÖò */}
          <div>
            <h4 className="font-medium text-gray-900 mb-3">üó∫Ô∏è ÏúÑÏπò</h4>
            <SmallMap 
              latitude={path.Latitude} 
              longitude={path.Longitude} 
              height="250px"
              className="w-full"
            />
          </div>

          {/* Ï£ºÏÜå Ï†ïÎ≥¥ */}
          {path.Address && (
            <div className="p-4 bg-gray-50 rounded-lg">
              <div className="flex items-start gap-3">
                <MapPin className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
                <div>
                  <div className="text-sm font-medium text-gray-800 mb-1">ÏúÑÏπò</div>
                  <p className="text-sm text-gray-600">{path.Address}</p>
                </div>
              </div>
            </div>
          )}

          {/* Í∏∞Î≥∏ Ï†ïÎ≥¥ */}
          <div className="grid grid-cols-2 gap-4">
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <MapPin className="h-5 w-5 text-blue-600" />
              <div>
                <div className="text-sm text-gray-600">Í±∞Î¶¨</div>
                <div className="font-medium">{getDistance()}</div>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Clock className="h-5 w-5 text-green-600" />
              <div>
                <div className="text-sm text-gray-600">ÏÜåÏöî ÏãúÍ∞Ñ</div>
                <div className="font-medium">{getTime()}</div>
              </div>
            </div>
          </div>

          {/* ÏΩîÏä§ ÏÑ§Î™Ö */}
          {path.ADIT_DC && (
            <div>
              <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                <Info className="h-5 w-5 text-blue-600" />
                ÏΩîÏä§ ÏÑ§Î™Ö
              </h4>
              <p className="text-gray-700 leading-relaxed">{path.ADIT_DC}</p>
            </div>
          )}

          {/* Í≤ΩÎ°ú Ï†ïÎ≥¥ */}
          {path.CoursRoute && (
            <div>
              <h4 className="font-medium text-gray-900 mb-3">üó∫Ô∏è Í≤ΩÎ°ú ÏïàÎÇ¥</h4>
              <p className="text-gray-700 leading-relaxed">{path.CoursRoute}</p>
            </div>
          )}

          {/* Ìé∏ÏùòÏãúÏÑ§ */}
          <div>
            <h4 className="font-medium text-gray-900 mb-3">üè¢ Ìé∏ÏùòÏãúÏÑ§</h4>
            <div className="flex gap-2 flex-wrap">
              {amenities.length > 0 ? (
                amenities.map((amenity, index) => (
                  <Badge key={index} variant="secondary" className="text-sm flex items-center gap-2 px-3 py-1">
                    <amenity.icon className={`h-4 w-4 ${amenity.color}`} />
                    {amenity.label}
                  </Badge>
                ))
              ) : (
                <span className="text-sm text-gray-500">Ìé∏ÏùòÏãúÏÑ§ Ï†ïÎ≥¥ ÏóÜÏùå</span>
              )}
            </div>
          </div>

          {/* Íµ¨Í∏Ä ÏßÄÎèÑ Í∏∞Î∞ò Í∑ºÏ≤ò ÎßõÏßë & ÎîîÏ†ÄÌä∏ */}
          <NearbyRestaurants title="Í∑ºÏ≤ò ÎßõÏßë & ÎîîÏ†ÄÌä∏" />

          {/* Ï∂îÍ∞Ä ÏòµÏÖò */}
          {path.Option && (
            <div>
              <h4 className="font-medium text-gray-900 mb-3 flex items-center gap-2">
                <Building className="h-5 w-5 text-purple-600" />
                Ï∂îÍ∞Ä Ï†ïÎ≥¥
              </h4>
              <div className="bg-gray-50 p-3 rounded-lg">
                <p className="text-gray-700 text-sm leading-relaxed">{path.Option}</p>
              </div>
            </div>
          )}

          {/* Ï¢åÌëú Ï†ïÎ≥¥ */}
          {path.Latitude && path.Longitude && (
            <div className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
              ÏúÑÎèÑ: {path.Latitude.toFixed(6)}, Í≤ΩÎèÑ: {path.Longitude.toFixed(6)}
            </div>
          )}

          {/* ÏÑ†ÌÉù Î≤ÑÌäº */}
          <div className="flex gap-3 pt-4">
            <Button 
              onClick={handleSelect}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
            >
              Ïù¥ Í≤ΩÎ°ú ÏÑ†ÌÉùÌïòÍ∏∞
            </Button>
            <Button 
              onClick={onClose}
              variant="outline"
              className="flex-1"
            >
              Îã´Í∏∞
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default RealPathDetailModal;
