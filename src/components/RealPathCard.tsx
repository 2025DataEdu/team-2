import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { MapPin, Clock, Info, Toilet, Car, Coffee, ShoppingCart, Lightbulb } from 'lucide-react';
import SmallMap from './SmallMap';
import VirtualNearbyFood from './VirtualNearbyFood';

interface RealWalkingPath {
  CoursCode: string;
  CoursName: string | null;
  CorusDetailName: string | null;
  Address: string | null;
  CoursLength: string | null;
  CoursDetailLength: number | null;
  CoursTime: string | null;
  CoursLv: string | null;
  CoursRoute: string | null;
  Latitude: number | null;
  Longitude: number | null;
  ADIT_DC: string | null;
  Option: string | null;
  Toilet: string | null;
  SIGNGU_NM: string | null;
  CVNTL_NM: string | null;
}

interface RealPathCardProps {
  path: RealWalkingPath;
  onSelect: () => void;
  onCardClick: () => void;
}

const RealPathCard = ({ path, onSelect, onCardClick }: RealPathCardProps) => {
  const getDifficultyColor = (level: string | null) => {
    if (!level) return 'bg-gray-100 text-gray-800';
    const levelLower = level.toLowerCase();
    if (levelLower.includes('Ïâ¨ÏõÄ') || levelLower.includes('Ï¥àÍ∏â')) return 'bg-green-100 text-green-800';
    if (levelLower.includes('Î≥¥ÌÜµ') || levelLower.includes('Ï§ëÍ∏â')) return 'bg-yellow-100 text-yellow-800';
    if (levelLower.includes('Ïñ¥Î†§ÏõÄ') || levelLower.includes('Í≥†Í∏â')) return 'bg-red-100 text-red-800';
    return 'bg-gray-100 text-gray-800';
  };

  const getDistance = () => {
    if (path.CoursDetailLength) return `${path.CoursDetailLength.toFixed(1)}km`;
    if (path.CoursLength) return path.CoursLength;
    return 'Í±∞Î¶¨ Ï†ïÎ≥¥ ÏóÜÏùå';
  };

  const getTime = () => {
    if (path.CoursTime) return path.CoursTime;
    const distance = path.CoursDetailLength || parseFloat(path.CoursLength || '0') || 0;
    return distance > 0 ? `ÏïΩ ${Math.round(distance * 15)}Î∂Ñ` : 'ÏãúÍ∞Ñ Ï†ïÎ≥¥ ÏóÜÏùå';
  };

  const getAmenities = () => {
    const amenities = [];
    
    if (path.Toilet === 'Y' || path.Toilet === 'ÏûàÏùå' || 
        (path.Option && (path.Option.includes('ÌôîÏû•Ïã§') || path.Option.includes('Í≥µÏ§ëÌôîÏû•Ïã§')))) {
      amenities.push({ icon: Toilet, label: 'ÌôîÏû•Ïã§', color: 'text-blue-600' });
    }
    
    if (path.Option && (path.Option.includes('Ï£ºÏ∞®') || path.Option.includes('Ï£ºÏ∞®Ïû•') ||
        path.Option.includes('Ï£ºÏ∞®ÏãúÏÑ§'))) {
      amenities.push({ icon: Car, label: 'Ï£ºÏ∞®Ïû•', color: 'text-green-600' });
    }
    
    if (path.Option && (path.Option.includes('Ìé∏ÏùòÏ†ê') || path.Option.includes('Îß§Ï†ê') ||
        path.Option.includes('ÏÉÅÏ†ê'))) {
      amenities.push({ icon: ShoppingCart, label: 'Ìé∏ÏùòÏ†ê', color: 'text-purple-600' });
    }
    
    if (path.Option && (path.Option.includes('Ïπ¥Ìéò') || path.Option.includes('Ïª§Ìîº') ||
        path.Option.includes('ÏùåÏãùÏ†ê') || path.Option.includes('ÏãùÎãπ') || 
        path.Option.includes('Ìú¥Í≤åÏÜå'))) {
      amenities.push({ icon: Coffee, label: 'Ïπ¥Ìéò/ÏùåÏãùÏ†ê', color: 'text-orange-600' });
    }
    
    if (path.ADIT_DC) {
      const description = path.ADIT_DC.toLowerCase();
      
      if (description.includes('ÌôîÏû•Ïã§') && !amenities.some(a => a.label === 'ÌôîÏû•Ïã§')) {
        amenities.push({ icon: Toilet, label: 'ÌôîÏû•Ïã§', color: 'text-blue-600' });
      }
      
      if ((description.includes('Ï£ºÏ∞®') || description.includes('Ï£ºÏ∞®Ïû•')) && 
          !amenities.some(a => a.label === 'Ï£ºÏ∞®Ïû•')) {
        amenities.push({ icon: Car, label: 'Ï£ºÏ∞®Ïû•', color: 'text-green-600' });
      }
      
      if ((description.includes('Ìé∏ÏùòÏ†ê') || description.includes('Îß§Ï†ê')) && 
          !amenities.some(a => a.label === 'Ìé∏ÏùòÏ†ê')) {
        amenities.push({ icon: ShoppingCart, label: 'Ìé∏ÏùòÏ†ê', color: 'text-purple-600' });
      }
      
      if ((description.includes('Ïπ¥Ìéò') || description.includes('Ïª§Ìîº') || 
           description.includes('ÏùåÏãùÏ†ê') || description.includes('ÏãùÎãπ')) && 
          !amenities.some(a => a.label === 'Ïπ¥Ìéò/ÏùåÏãùÏ†ê')) {
        amenities.push({ icon: Coffee, label: 'Ïπ¥Ìéò/ÏùåÏãùÏ†ê', color: 'text-orange-600' });
      }
    }
    
    return amenities;
  };

  const getRecommendationReason = () => {
    const reasons = [];
    
    const distance = path.CoursDetailLength || parseFloat(path.CoursLength || '0') || 0;
    if (distance <= 2) {
      reasons.push('Í∞ÄÎ≤ºÏö¥ ÏÇ∞Ï±ÖÏóê Ï†ÅÌï©Ìïú ÏßßÏùÄ Í±∞Î¶¨');
    } else if (distance <= 4) {
      reasons.push('Ï†ÅÎãπÌïú Ïö¥ÎèôÎüâÏùò Ï§ëÍ±∞Î¶¨ ÏΩîÏä§');
    } else {
      reasons.push('Ï∂©Î∂ÑÌïú Ïö¥Îèô Ìö®Í≥ºÎ•º Í∏∞ÎåÄÌï† Ïàò ÏûàÎäî Ïû•Í±∞Î¶¨ ÏΩîÏä§');
    }
    
    if (path.CoursLv) {
      const level = path.CoursLv.toLowerCase();
      if (level.includes('Ïâ¨ÏõÄ') || level.includes('Ï¥àÍ∏â')) {
        reasons.push('Ï¥àÎ≥¥ÏûêÎèÑ Î∂ÄÎã¥ ÏóÜÏù¥ Ï¶êÍ∏∏ Ïàò ÏûàÎäî ÎÇúÏù¥ÎèÑ');
      } else if (level.includes('Î≥¥ÌÜµ') || level.includes('Ï§ëÍ∏â')) {
        reasons.push('Ï†ÅÎãπÌïú ÎèÑÏ†ÑÍ≥º Ïö¥Îèô Ìö®Í≥ºÎ•º Ï†úÍ≥µÌïòÎäî ÏΩîÏä§');
      } else if (level.includes('Ïñ¥Î†§ÏõÄ') || level.includes('Í≥†Í∏â')) {
        reasons.push('ÎèÑÏ†ÑÏ†ÅÏù∏ ÏΩîÏä§Î°ú ÎÜíÏùÄ Ïö¥Îèô Ìö®Í≥º Í∏∞ÎåÄ');
      }
    }
    
    if (path.Toilet === 'Y' || path.Toilet === 'ÏûàÏùå') {
      reasons.push('ÌôîÏû•Ïã§ Îì± Ìé∏ÏùòÏãúÏÑ§Ïù¥ Ïûò Í∞ñÏ∂∞ÏßÑ ÏΩîÏä§');
    }
    
    if (path.SIGNGU_NM) {
      reasons.push(`${path.SIGNGU_NM} ÏßÄÏó≠Ïùò ÎåÄÌëúÏ†ÅÏù∏ ÏÇ∞Ï±ÖÎ°ú`);
    }
    
    if (path.ADIT_DC) {
      const description = path.ADIT_DC.toLowerCase();
      if (description.includes('Í∞ï') || description.includes('Ìò∏Ïàò')) {
        reasons.push('ÏïÑÎ¶ÑÎã§Ïö¥ ÏàòÎ≥Ä ÌíçÍ≤ΩÏùÑ Í∞êÏÉÅÌï† Ïàò ÏûàÎäî ÏΩîÏä§');
      }
      if (description.includes('Ïà≤') || description.includes('ÎÇòÎ¨¥')) {
        reasons.push('ÏûêÏó∞ ÏÜçÏóêÏÑú ÌûêÎßÅÌï† Ïàò ÏûàÎäî Ïà≤Í∏∏ ÏΩîÏä§');
      }
      if (description.includes('Ïó≠ÏÇ¨') || description.includes('Î¨∏Ìôî')) {
        reasons.push('Ïó≠ÏÇ¨ÏôÄ Î¨∏ÌôîÎ•º Ìï®Íªò Ï≤¥ÌóòÌï† Ïàò ÏûàÎäî ÏΩîÏä§');
      }
    }
    
    return reasons.slice(0, 2).join(', ') + 'ÏûÖÎãàÎã§.';
  };

  const handleCardClick = () => {
    onCardClick();
  };

  const handleSelectClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    onSelect();
  };

  const amenities = getAmenities();
  const recommendationReason = getRecommendationReason();

  return (
    <Card className="hover:shadow-lg transition-shadow cursor-pointer h-full" onClick={handleCardClick}>
      <CardHeader>
        <div className="flex justify-between items-start">
          <CardTitle className="text-lg line-clamp-2">
            {path.CoursName || path.CorusDetailName || 'ÏÇ∞Ï±ÖÎ°ú'}
          </CardTitle>
          <Badge variant="outline" className="ml-2 flex-shrink-0">
            Ïã§Ï†úÍ≤ΩÎ°ú
          </Badge>
        </div>
        
        <div className="flex gap-2 flex-wrap">
          {path.CoursLv && (
            <Badge className={getDifficultyColor(path.CoursLv)}>
              {path.CoursLv}
            </Badge>
          )}
          {path.SIGNGU_NM && (
            <Badge variant="outline" className="text-xs">
              {path.SIGNGU_NM}
            </Badge>
          )}
        </div>
      </CardHeader>
      
      <CardContent className="flex flex-col h-full">
        <div className="flex-grow">
          <div className="mb-4">
            <SmallMap 
              latitude={path.Latitude} 
              longitude={path.Longitude} 
              height="150px"
              className="w-full"
            />
          </div>

          {path.Address && (
            <p className="text-sm text-gray-600 mb-3 line-clamp-2">
              üìç {path.Address}
            </p>
          )}

          <div className="mb-4 p-3 bg-blue-50 rounded-lg border-l-4 border-blue-400">
            <div className="flex items-start gap-2">
              <Lightbulb className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
              <div>
                <div className="text-xs font-medium text-blue-800 mb-1">üí° Ï∂îÏ≤ú Ïù¥Ïú†</div>
                <p className="text-xs text-blue-700 line-clamp-2">{recommendationReason}</p>
              </div>
            </div>
          </div>
          
          {path.ADIT_DC && (
            <p className="text-sm text-gray-700 mb-4 line-clamp-3">
              {path.ADIT_DC}
            </p>
          )}
          
          <div className="grid grid-cols-2 gap-3 mb-4">
            <div className="flex items-center gap-2">
              <MapPin className="h-4 w-4 text-blue-600" />
              <span className="text-sm">{getDistance()}</span>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4 text-green-600" />
              <span className="text-sm">{getTime()}</span>
            </div>
          </div>

          {amenities.length > 0 && (
            <div className="mb-4">
              <div className="text-sm font-medium text-gray-700 mb-2">Ìé∏ÏùòÏãúÏÑ§</div>
              <div className="flex gap-2 flex-wrap">
                {amenities.map((amenity, index) => (
                  <Badge key={index} variant="secondary" className="text-xs flex items-center gap-1">
                    <amenity.icon className={`h-3 w-3 ${amenity.color}`} />
                    {amenity.label}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          <div className="mb-4">
            <VirtualNearbyFood 
              pathLocation={path.SIGNGU_NM || path.Address}
              pathName={path.CoursName || path.CorusDetailName}
            />
          </div>

          {path.CoursRoute && (
            <div className="mb-4">
              <div className="text-sm font-medium text-gray-700 mb-2 flex items-center gap-1">
                <Info className="h-4 w-4" />
                Í≤ΩÎ°ú Ï†ïÎ≥¥
              </div>
              <p className="text-sm text-gray-600 line-clamp-2">{path.CoursRoute}</p>
            </div>
          )}

          {path.Option && (
            <div className="mb-4">
              <div className="text-sm font-medium text-gray-700 mb-2">Ï∂îÍ∞Ä Ï†ïÎ≥¥</div>
              <p className="text-xs text-gray-600 line-clamp-2">{path.Option}</p>
            </div>
          )}
        </div>

        <Button 
          onClick={handleSelectClick}
          className="w-full bg-blue-600 hover:bg-blue-700 mt-auto"
        >
          Ïù¥ Í≤ΩÎ°ú ÏÑ†ÌÉùÌïòÍ∏∞
        </Button>
      </CardContent>
    </Card>
  );
};

export default RealPathCard;
